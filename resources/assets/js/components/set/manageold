<template>
    <section class="content">
        <Row>
            <Col span="6">
                <div class="title">套餐
                    <Dropdown trigger="click">
                        <a href="javascript:void(0)">
                            <Icon type="md-create"></Icon>
                        </a>
                        <DropdownMenu slot="list">
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增廚房聯規則</DropdownItem>
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增標籤貼紙規則</DropdownItem>
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增客戶聯規則</DropdownItem>
                            <DropdownItem><Icon type="md-create"></Icon>編輯出單名稱</DropdownItem>
                            <DropdownItem><Icon type="md-copy"></Icon>複製此出單機</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <div style="margin-bottom:40px"></div>
                <div class="union">
                    <CardA v-for="(item, index) in currentSetClass"
                           :class-name="item"
                           :class="{ active: index === 0 }"
                           @class-on-click="AClassOnClick"
                    >
                    </CardA>
                </div>
            </Col>
            <Col span="6">
                <div class="title">{{currentBItemName}}
                    <Dropdown trigger="click">
                        <a href="javascript:void(0)">
                            <Icon type="md-create"></Icon>
                        </a>
                        <DropdownMenu slot="list">
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增廚房聯規則</DropdownItem>
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增標籤貼紙規則</DropdownItem>
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增客戶聯規則</DropdownItem>
                            <DropdownItem><Icon type="md-create"></Icon>編輯出單名稱</DropdownItem>
                            <DropdownItem><Icon type="md-copy"></Icon>複製此出單機</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <div class="union">
                    <h4>類別</h4>
                    <CardB v-for="(item, index) in currentBClass"
                           class="B-class"
                           :card-name="item"
                           :class="{ lastcard: index === (currentBClass.length-1) }"
                           @card-change-name="onCardChangeName($event, item, index, currentBClass, currentBItemName)"
                           @class-on-click="BClassOnClick"
                           @class-delete="deleteC($event, currentBItemName, currentBClass)"
                    >
                    </CardB>
                    <div @click="addNewC($event, currentBItemName)"
                         class="add-new-card"
                         v-show="currentBClass.length >= 0"
                         >
                         <Icon type="ios-add" /></Icon>新增項目
                    </div>
                    </CardA>
                    <h4>項目</h4>
                    <CardB v-for="(item, index) in currentBItem"
                           :card-name="item" 
                           :class="{ lastcard: index === (currentBItem.length-1) }"
                           @class-on-click="BItemOnClick"
                           @class-delete="deleteItem($event, currentBItemName, currentBItem)"
                    >
                    </CardB>
                    <div @click="addNewItem($event, currentBItemName)"
                         class="add-new-card"
                         v-show="currentBItem.length >= 0"
                         >
                         <Icon type="ios-add" /></Icon>新增項目
                    </div>
                </div>
            </Col>
            <Col span="6">
                <div class="title">{{currentBClassName}}
                    <Dropdown trigger="click">
                        <a href="javascript:void(0)">
                            <Icon type="md-create"></Icon>
                        </a>
                        <DropdownMenu slot="list">
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增廚房規則</DropdownItem>
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增標籤貼紙規則</DropdownItem>
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增客戶聯規則</DropdownItem>
                            <DropdownItem><Icon type="md-create"></Icon>編輯出單名稱</DropdownItem>
                            <DropdownItem><Icon type="md-copy"></Icon>複製此出單機</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </div>
                <div class="union">
                    <h4>項目</h4>                    
                    <CardC v-for="(item, index) in currentCItem"
                           :class-name="item" 
                           :class="{ lastcard: index === (currentCItem.length-1) }"
                           @class-delete="deleteItem($event, currentBClassName, currentCItem)"
                    >
                    </CardC>
                    <div @click="addNewItem($event, currentBClassName)"
                         @class-on-click="CItemOnClick"
                         class="add-new-card"
                         v-show="currentCItem.length > 0"
                         >
                         <Icon type="ios-add" /></Icon>新增項目
                    </div>
                </div>
            </Col>
            <Col span="6">
                <div class="title">餐點名
                    <Dropdown trigger="click">
                        <a href="javascript:void(0)">
                            <Icon type="md-create"></Icon>
                        </a>
                        <DropdownMenu slot="list">
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增廚房聯規則</DropdownItem>
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增標籤貼紙規則</DropdownItem>
                            <DropdownItem><Icon type="ios-add-circle"></Icon>新增客戶聯規則</DropdownItem>
                            <DropdownItem><Icon type="md-create"></Icon>編輯出單名稱</DropdownItem>
                            <DropdownItem><Icon type="md-copy"></Icon>複製此出單機</DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </div>
            </Col>
        </Row>        
    </section>
</template>
<script>
import { mapGetters } from 'vuex';
import CardA from '../utils/card.vue';
import CardB from '../utils/cardB.vue';
import CardC from '../utils/cardC.vue';

// let WebHelper = require('../../utils/wehelper');


  export default {
    components: {
        CardA, 
        CardB,
        CardC,
    },
    data() {
        return {
            currentBClass: [],
            currentBClassName: '無',
            currentBItem: [],
            currentBItemName: '無',
            currentCItem: []
        }
    },
    mounted: function() {
        // A區塊的預設值
        let result = $.map(this.setItem, function(item, index) {
            return item.level
        }).indexOf('A');

        // 設定B塊的預設值為第一個
        let Bdefault = this.setItem[result].name[0];
        this.currentBItemName = Bdefault;
        this.changeBClass(Bdefault);
        this.changeBItem(Bdefault);
    },
    computed: {
      ...mapGetters([
        'User',
        'setItem',
        'rules'
      ]),
      currentSetClass: function() {// A區塊的預設值
        let result = $.map(this.setItem, function(item, index) {
            return item.level
        }).indexOf('A');        

        return this.setItem[result].name;
      }
    },
    watch: {
    },
    // 改进vue的初始化数据调用时机 --
    // https://www.jianshu.com/p/2048f1a66c33
    methods: {
        AClassOnClick: function(setClass) {
            console.log('哪張卡點了', setClass);

            // 給B區塊名字
            this.currentBItemName = setClass;
            // 清空C區塊
            this.currentCItem = '';
            this.changeBClass(setClass);
            this.changeBItem(setClass);
        },
        BClassOnClick: function(BClass) {
            console.log('B Class OnClick', BClass);
            // 給C區塊名字
            this.currentBClassName = BClass;
            this.changeCItem(BClass);
        },
        onCardChangeName: function(newName, oldName, index, currentClass, currentItemName) {

            // 改變這個名字
            // currentClass[index] = newName;

            // 改變state
            // // 找到當前項目的類型在'當前陣列'的第幾個
            // let cArrayIndex = $.map(this.setItem, function(item, index) {
            //     return item
            // }).indexOf(currentItemName);
            // console.log('cArrayIndexcArrayIndex',cArrayIndex);

            // 找到當前項目的類型在'setItem陣列'的第幾個obj組別
            let result = $.map(this.setItem, function(item, index) {
                return item.types
            }).indexOf(oldName);
            console.log('resultresult', result);
            
            // 對複製的陣列刪去項目
            let cloneItem = this.setItem;
            console.log('1110 =====', cloneItem[result]);
            // 克隆的陣列移除到某個在'當前陣列'的第X個被選取的東西
            console.log('1110 =====', cloneItem[result].type);
            cloneItem[result].type = newName;
            console.log('1110 cloneItem =====', cloneItem[result].type);

            this.$store.commit({
                type: 'changeCardName',
                newArray: cloneItem,
            });
            console.log('9955 =====', this.setItem);
            //刷新這個陣列
            this.currentBClass[index] = newName;

            this.changeBClass(this.currentBItemName);

        },
        BItemOnClick: function(BItem) {
            console.log('B Item OnClick', BItem);
        },
        CItemOnClick: function(CITem) {
            console.log('C Item OnClick', CITem);
        },

        changeBClass: function(setClass) {
            // 先篩上層是setClass的陣列
            let filterArray =  _.filter(this.setItem, {parent: setClass} );
            //只要 type的值
            let findTypesValue = _.partial(_.map, _, 'types');
            // Render currentBClass 的值
            this.currentBClass = findTypesValue( filterArray );

            // 這個this.currentBClass完全沒有更新到 可能是findTypesValue的問題
            console.log('this currentB Class ======', this.currentBClass);

        },
        changeBItem: function(setClass) {

            let filterArray =  _.filter(this.setItem, {types: setClass} );
            this.currentBItem = filterArray[0].name;

            console.log('this currentB Item =======',  this.currentBItem);
        },
        changeCItem: function(setSubClass) {

            console.log('改變第三欄的項目');                  
            //find object in list
            let result = $.map(this.setItem, function(item, index) {
                return item.types
            }).indexOf(setSubClass);
            
            this.currentCItem = this.setItem[result].name;
        },
        addNewC: function($event, parentName) {

            console.log('如果parentName----------?', parentName);

            // vuex 控制 陣列
            let cloneItem = this.setItem;
            cloneItem.push({
                parent: parentName,
                types:'新項目',
                level: 'C',
                name: []
            });

            this.$store.commit({
                type: 'addNewItem',
                newArray: cloneItem,
            });
            this.changeBClass(parentName);
        },        
        addNewItem: function($event, typeName) {

            // 如果沒有su 類別的話?
            console.log('如果沒有su 類別的話?',typeName);
            console.log('currentType', typeName);

            //find object in list
            let result = $.map(this.setItem, function(item, index) {
                return item.types
            }).indexOf(typeName);

            // vuex 控制 陣列
            let cloneItem = this.setItem;
            cloneItem[result].name.push('新項目');

            this.$store.commit({
                type: 'addNewItem',
                newArray: cloneItem,
            });
            console.log('addNewItem~~');
            console.log('this.currentCItem',this.currentCItem);
            console.log(this.setItem);
        },
        deleteC: function($event, typeName, currentArray) {

            let currentClassName = $event;
console.log('A',currentClassName);
console.log('B',typeName);
console.log('C',currentArray);
            // 先篩當前子分類在'setItem' 第幾個
            // let filterArray =  _.filter(this.setItem, {parent: typeName} );

            // 找到當前項目的類型在'setItem陣列'的第幾個obj組別並全部刪除
            // 到時候要加確認的 light box
            let cArrayIndex = $.map(this.setItem, function(item, index) {
                return item.types
            }).indexOf(currentClassName);
            console.log('-------------------',cArrayIndex);

             // 對複製的陣列刪去項目
            let cloneItem = this.setItem;
            cloneItem.splice(cArrayIndex, 1);

            this.$store.commit({
                type: 'deleteItem',
                newArray: cloneItem,
            });
            console.log(this.setItem);
            // why 這個要手動?
            this.changeBClass(typeName);
            console.log('------- end ------------');

        },
        deleteItem: function($event, typeName, currentArray) {

            // 得到當前項目的類型 -- typeName
            // 得到當前項目的名字
            
            let currentItem = $event;
console.log('A',currentItem);
console.log('B',typeName);
console.log('C',currentArray);
            // 找到當前項目的類型在'當前陣列'的第幾個
            let cArrayIndex = $.map(currentArray, function(item, index) {
                return item
            }).indexOf(currentItem);
            console.log('cArrayIndex indexof',cArrayIndex);

            // 找到當前項目的類型在'setItem陣列'的第幾個obj組別
            let result = $.map(this.setItem, function(item, index) {
                return item.types
            }).indexOf(typeName);
            console.log('result indexof',result);
            
            // 對複製的陣列刪去項目
            let cloneItem = this.setItem;
            // 克隆的陣列移除到某個在'當前陣列'的第X個被選取的東西
            console.log('999995 =====', cloneItem[result].name);
            cloneItem[result].name.splice(cArrayIndex, 1)
            console.log('cloneItem =====', cloneItem[result].name);

            this.$store.commit({
                type: 'deleteItem',
                newArray: cloneItem,
            });
            // 這邊要把更改狀態的東西一並處理好，這邊太瑣碎了 
            // 偵測哪邊的東西被改了才改哪邊
            console.log(this.setItem);
        }
    }
  }
</script>

<style lang="scss">    
</style>
